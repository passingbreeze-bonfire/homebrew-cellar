[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "getcurcur"
dynamic = ["version"]
description = 'get current currency exchange rate'
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = []
authors = [
  { name = "passingbreeze", email = "jeongmin1237@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "playwright",
  "typer[all]",
  "beautifulsoup4",
  "tenacity"
]

[project.optional-dependencies]
test = [
  "pytest>=7.0",
  "pytest-cov",
]
dev = [
  "pytest>=7.0",
  "pytest-cov",
  "mypy>=1.0.0",
  "ruff",
  "bandit",
  "safety",
]

[project.scripts]
getcurcur = "getcurcur.main:app"

[project.urls]
Documentation = "https://github.com/passingbreeze-bonfire/homebrew-cellar/getcurcur#readme"
Issues = "https://github.com/passingbreeze-bonfire/homebrew-cellar/issues"
Source = "https://github.com/passingbreeze-bonfire/homebrew-cellar/getcurcur"

[tool.hatch.version]
path = "src/getcurcur/__about__.py"

[tool.hatch.envs.types]
extra-dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/getcurcur tests}"

# Ruff configuration for code quality
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "S",   # flake8-bandit
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "S101", # Use of assert detected
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "D100", "D103"]

[tool.ruff.pydocstyle]
convention = "google"

# MyPy configuration for type checking
[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "playwright.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "bs4.*"
ignore_missing_imports = true

[tool.coverage.run]
source_pkgs = ["getcurcur", "tests"]
branch = true
parallel = true
omit = [
  "src/getcurcur/__about__.py",
]

[tool.coverage.paths]
getcurcur = ["src/getcurcur", "*/getcurcur/src/getcurcur"]
tests = ["tests", "*/getcurcur/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
]

# Bandit configuration for security analysis
[tool.bandit]
exclude_dirs = ["tests"]